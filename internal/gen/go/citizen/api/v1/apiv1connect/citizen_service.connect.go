// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: citizen/api/v1/citizen_service.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Eitol/citizen_api/internal/gen/go/citizen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CitizenServiceName is the fully-qualified name of the CitizenService service.
	CitizenServiceName = "shipment.api.v1.CitizenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CitizenServiceFindCitizenByDocIdProcedure is the fully-qualified name of the CitizenService's
	// FindCitizenByDocId RPC.
	CitizenServiceFindCitizenByDocIdProcedure = "/shipment.api.v1.CitizenService/FindCitizenByDocId"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	citizenServiceServiceDescriptor                  = v1.File_citizen_api_v1_citizen_service_proto.Services().ByName("CitizenService")
	citizenServiceFindCitizenByDocIdMethodDescriptor = citizenServiceServiceDescriptor.Methods().ByName("FindCitizenByDocId")
)

// CitizenServiceClient is a client for the shipment.api.v1.CitizenService service.
type CitizenServiceClient interface {
	FindCitizenByDocId(context.Context, *connect.Request[v1.FindCitizenByDocIdRequest]) (*connect.Response[v1.FindCitizenByDocIdResponse], error)
}

// NewCitizenServiceClient constructs a client for the shipment.api.v1.CitizenService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCitizenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CitizenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &citizenServiceClient{
		findCitizenByDocId: connect.NewClient[v1.FindCitizenByDocIdRequest, v1.FindCitizenByDocIdResponse](
			httpClient,
			baseURL+CitizenServiceFindCitizenByDocIdProcedure,
			connect.WithSchema(citizenServiceFindCitizenByDocIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// citizenServiceClient implements CitizenServiceClient.
type citizenServiceClient struct {
	findCitizenByDocId *connect.Client[v1.FindCitizenByDocIdRequest, v1.FindCitizenByDocIdResponse]
}

// FindCitizenByDocId calls shipment.api.v1.CitizenService.FindCitizenByDocId.
func (c *citizenServiceClient) FindCitizenByDocId(ctx context.Context, req *connect.Request[v1.FindCitizenByDocIdRequest]) (*connect.Response[v1.FindCitizenByDocIdResponse], error) {
	return c.findCitizenByDocId.CallUnary(ctx, req)
}

// CitizenServiceHandler is an implementation of the shipment.api.v1.CitizenService service.
type CitizenServiceHandler interface {
	FindCitizenByDocId(context.Context, *connect.Request[v1.FindCitizenByDocIdRequest]) (*connect.Response[v1.FindCitizenByDocIdResponse], error)
}

// NewCitizenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCitizenServiceHandler(svc CitizenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	citizenServiceFindCitizenByDocIdHandler := connect.NewUnaryHandler(
		CitizenServiceFindCitizenByDocIdProcedure,
		svc.FindCitizenByDocId,
		connect.WithSchema(citizenServiceFindCitizenByDocIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/shipment.api.v1.CitizenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CitizenServiceFindCitizenByDocIdProcedure:
			citizenServiceFindCitizenByDocIdHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCitizenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCitizenServiceHandler struct{}

func (UnimplementedCitizenServiceHandler) FindCitizenByDocId(context.Context, *connect.Request[v1.FindCitizenByDocIdRequest]) (*connect.Response[v1.FindCitizenByDocIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("shipment.api.v1.CitizenService.FindCitizenByDocId is not implemented"))
}
